formulas(assumptions).

    % These are assumptions I think are needed to make some of the demonstrations valid.

    % Trivially, anything that's an idea of something is an idea.
    all I all O ( is_idea_of(I,O) -> is_idea(I) ).
    all I all O ( is_cognition_of(I,O) <-> is_idea_of(I,O) ).

    % Ideas = concepts
    all I all X ( is_idea_of(I,X) <-> is_concept_of(I,X) ).

    % Whatever we end up talking about is a "thing".
    all X is_thing(X).

    % There is an idea of each thing. (Needed for 2p7)
    all T ( exists I ( is_idea_of(I, T) ) ).

    % Definition of essential involvement
    all X all F (
        involves_essentially(X,F)
        <-> all E ( is_essence_of(E,X) -> involves(E,F) )
    ).

    % We need either this or 'everything has a cause'
    % Everything is conceived through something.
    all X (exists Y conceived_through(X,Y)).

    % Everything has a cause.
    all X (exists Y causes(Y,X)).

    % Relationship between conceivability and necessity.
    all X all F ( -conceivably_has(X,F) <-> necessarily_lacks(X,F) ).

    % Reformulations of above.
    all X all F ( necessarily_lacks(X,F) <-> -possibly_has(X,F) ).
    all X all F ( conceivably_lacks(X,F) <-> -necessarily_has(X,F) ).

    % Seemingly at least one of these is needed for 1p1
    all X all Y ( is_conceived_through(Y, X) -> is_prior_in_nature_to(X, Y) ).

    % This can't be right because God is in God but is not prior to Himself.
    all X all Y ( is_in(Y, X) -> is_prior_in_nature_to(X, Y) ).

    all A all S ( is_affection_of(A,S) -> ( is_affection(A) & has(S, A) ) ).
    all A all S ( is_attribute_of(A,S) -> ( is_attribute(A) & has(S, A) ) ).

    all X all Y ( is_mode_of(X,Y) <-> is_affection_of(X,Y) ).

    all X ( is_mode(X) <-> is_affection(X) ).

    all X all Y ( is_mode_of(X,Y) <-> ( is_mode(X) & has(Y, X) ) ).

    all X all Y (
        is_conceived_through(A, B)
        ->
        (
            exists CA exists CB (
                is_concept_of(CA, A) &
                is_concept_of(CB, B) &
                involves(CB, CA)
            )
        )
    ).

    all A all B (
        neither_is_understood_through_the_other(A, B)
        <->
        (
            -is_understood_through(A, B)
            & -is_understood_through(B, A)
        )
    ).

    all A all B (
        neither_causes_the_other(A, B)
        <->
        (
            -causes(A, B)
            & -causes(B, A)
        )
    ).

    all A all B (
        the_concept_of_the_one_does_not_involve_the_concept_of_the_other(A, B)
        <->
        (
            all CA all CB (
                (
                    is_concept_of(CA, A)
                    & is_concept_of(CB, B)
                )
                ->
                (
                    -involves(CA, CB)
                    & -involves(CB, CA)
                )
            )
        )
    ).

    all A all B (
        causes(A, B) -> is_understood_through(B, A)
    ).

    all A all B (
        is_understood_through(A, B) <-> is_conceived_through(A, B)
    ).

    % This is to bring everything under the scope of 1a1
    all X ( is(X) ).

    % Controversial but I think it's needed for 1p4. Talk of attributes is just
    % a way of talking about how a substance is conceived and it can be
    % regimented out.
    %all A ( is_attribute(A) <-> is_a_substance(A) ).

    all X all Y (
        produces(X, Y)
        ->
        causes(X, Y)
    ).

    all A (
        is_only_in_itself(A)
        <->
        (
            all B ( is_in(A,B) -> (B=A) )
        )
    ).

    all A (
        is_only_in_another(A)
        % better: is only in exactly one, distinct, thing
        <->
        (
            exists B ( -(B=A) & is_in(A,B) )
        )
    ).

    all A all B (
        causes(A, B) <-> is_in(B, A)
    ).

    %all A all B ( -produces(A, B) ). % just for debugging 1p6

    % If we write 2p7 in a way that involves the idea of a "connection", then we might need these.
    % Each dependency relation is a "connection" in a graph.
    %all X all Y ( depends_on(X,Y) <-> is_connected_to(X,Y) ).
    %all X all Y ( depends_on(X,Y) <-> is_connected_to(Y,X) ). % perhaps?
    %all X all Y ( involves(X,Y) <-> is_connected_to(X,Y) ).
    %all X all Y ( involves(X,Y) <-> is_connected_to(Y,X) ). % perhaps?
    %all X all Y ( causes(X,Y) <-> is_connected_to(X,Y) ).
    %all X all Y ( causes(X,Y) <-> depends_on(Y,X) ). % perhaps?
    %all X all Y ( is_connected_to(X,Y) -> causes(X,Y) ). % might make 2p7 work
    %all X all Y ( is_connected_to(X,Y) -> ( causes(X,Y) | depends_on(X,Y) | involves(X,Y) ) ). % needed for 2p7?

    all S ( pertains_to_its_nature_to_exist(S) <-> essence_involves_existence(S) ).

    all S ( -conceivably_does_not_exist(S) <-> necessarily_exists(S) ).

    all X ( necessarily_exists(X) <-> ( all E ( is_existence(E) -> necessarily_has(X, E) ) ) ).

    % Needed for 1p14. Each substance has an attribute.
    all S ( ( is_a_substance(S) & -is_attribute(S) ) -> ( exists A ( is_attribute_of(A, S) ) ) ).
    % I've included the clause `& -is_attribute(S)`, which is strictly speaking
    % false. If we don't include it, this line combines with the formula
    % stating that each attribute is a substance to produce an infinite loop.

    % Rewriting the above.
    all S all T all A (
        % If an attribute belongs to two substances...
        ( is_a_substance(S) & is_a_substance(T) & is_attribute_of(A, S) & is_attribute_of(A, T) )
        ->
        % ...then they are identical
        (S = T)
    ).

    exists S ( is_a_substance(S) & -(S=God) )
    ->
    exists S exists T exists A (
        -(S=T) & is_attribute_of(A,S) & is_attribute_of(A,T)
    ).

    %all X ( is_in(X,God) & -can_be_without(X,God) & -can_be_conceived_without(X,God) ).

    all X all Y ( causes(X,Y) -> -can_be_without(Y,X) ).
    all X all Y ( is_conceived_through(X,Y) -> -can_be_conceived_without(Y,X) ).

    % the intellect infers from the given definition of any thing a number of
    % properties that really do follow necessarily from it (i.e., from the very
    % essence of the thing); (1p16)

    % "the intellect...infers more properties the more the definition of the
    % thing expresses reality, i.e., the more reality the essence of the
    % defined thing involves." (1p16)

    % Paraphrase this as: if the definition of a thing expresses an infinite
    % amount of reality, then the intellect infers an infinite number of
    % properties from it.
    all x (
        ( exists amount_of_reality (
            expresses(definition(x),amount_of_reality) &
            infinite(amount_of_reality)
        ))
        ->
        exists properties (
            (properties = modes_of(x)) &
            (a_infers_b_from_c(Intellect, properties, definition(x))) &
            infinite(properties)
        )
    ).

    exists amount_of_reality (
        expresses(definition(God), amount_of_reality) &
        infinite(amount_of_reality)
    ).

    % If something expresses an infinite essence...
    all x all y (
        (
            expresses(x,y) & is_essence_of(y,x) & infinite(y)
        )
        ->
        % ...then the intellect infers an infinite set of properties from it.
        exists properties (
            (properties = modes_of(x)) &
            (a_infers_b_from_c(Intellect, properties, definition(x))) &
            infinitely_large_set(properties)
        )
    ).

    all x (infinitely_large_set(x) <-> number(x, Infinity)).

    all x (is_infinite(x) <-> infinite(x)).

    follows_from(existence(God),definition(God)).

    % If the existence of something is eternity then it is
    % eternal.
    all x ((existence(x) = Eternity) -> eternal(x)).

    all A all B (produced_by(B, A) <-> produces(A, B)).

    is_the_nature_of(DivineNature, God).

    % Possibly incorrect.
    all x all y ( is_nothing_but(x,y) <-> x=y ).

    % A mode of a substance is a mode of one of its attributes.  Helps 1p25c go
    % through.
    all M all S (
        is_mode_of(M, S)
        ->
        exists A (is_attribute_of(A, S) & is_mode_of(M, A))
    ).

    % Assumptions that allow 1p25c to go through.
    all x all y (expresses(x,y) -> expresses_in_a_certain_and_determinate_way(x,y)).
    all x all y (is_mode_of(x,y) -> expresses(x,y)).

    % all x (has_always_existed(x) <-> sempiternal(x)).
    % all x (has_always_been_infinite(x) <-> is_infinite(x)).

    % all x all y (eternal_through(x, y) -> is_eternal(x)).
    % all x all y (infinite_through(x, y) -> is_infinite(x)).

    % all x ( is_finite(x) <-> -is_infinite(x) ).

    all x all y (follows_from(y,x) <-> causes(x,y)).
    all x all y (follows_from(y,x) <-> determines_to_produce_effect(x,y)).
    all x all y (follows_from(y,x) <-> determines_to_exist(x,y)).
    all x all y (determines_to_produce_effect(x,y) <-> exists z (x_determines_y_to_produce_z(x,y,z))).
    all x (finite(x) <-> has_determinate_existence(x)).
    %all x all y (can_produce(x, y) <-> produces(x, y)).

end_of_list.

% vim:ft=prover9
