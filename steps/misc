formulas(assumptions).

    % Trivially, any thing that's an idea of something is an idea.
    all i all o ( is_idea_of(i,o) -> is_idea(i) ).

    % Ideas = concepts
    all i all x ( is_idea_of(i,x) <-> is_concept_of(i,x) ).

    % Each dependency relation is a "connection" in a graph.
    all x all y ( depends_on(x,y) -> exists c ( connects(c,y,x) ) ).

    % Each causal relation is a "connection".
    all x all y ( causes(x,y) -> exists c ( connects(c,x,y) ) ).

    % Whatever we end up talking about is a "thing".
    all x is_thing(x).

    % There is at least one idea.
    exists x is_idea(x).

    %% Conception and causation
    all x all y ( conceived_through(x,y) <-> causes(y,x) ).

    % Definition of essential involvement
    all x all F (
        involves_essentially(x,F)
        <-> all e ( is_essence_of(e,x) -> involves(e,F) )
    ).

    % We need either this or 'everything has a cause'
    % Everything is conceived through something.
    all x (exists y conceived_through(x,y)).

    % Everything has a cause.
    all x (exists y causes(y,x)).

    % Relationship between conceivability and necessity.
    all x all F ( -conceivably_has(x,F) <-> necessarily_lacks(x,F) ).

    % Reformulations of above.
    all x all F ( necessarily_lacks(x,F) <-> -possibly_has(x,F) ).
    all x all F ( conceivably_lacks(x,F) <-> -necessarily_has(x,F) ).

    % What can be conceived as not existing doesn't essentially involve
    % existence.
    all x all F (
        conceivably_lacks(x,existence) ->
        -involves_essentially(x,existence)
    ).

    % Seemingly needed for 1p1
    all x all y ( is_conceived_through(y, x) -> is_prior_in_nature_to(x, y) ).

    % Seemingly needed for 1p1 (although it seems that either this or the above
    % will do)
    all x all y ( exists_in(y, x) -> is_prior_in_nature_to(x, y) ).

    all x all y ( is_affection_of(x,y) -> is_affection(x) ).

    all x all y ( is_mode_of(x,y) <-> is_affection_of(x,y) ).

    all x ( is_mode(x) <-> is_affection(x) ).

    all x all y ( is_mode_of(x,y) <-> is_mode(x) ).

    all x all y (
        is_conceived_through(a, b)
        ->
        exists ca exists cb
        (
            is_concept_of(ca, a) &
            is_concept_of(cb, b) &
            involves(cb, ca)
        )
    ).

    all a all b (
        neither_is_understood_through_the_other(a, b)
        <->
        (
            -is_understood_through(a, b)
            & -is_understood_through(b, a)
        )
    ).

    all a all b (
        neither_causes_the_other(a, b)
        <->
        (
            -causes(a, b)
            & -causes(b, a)
        )
    ).

    all a all b (
        the_concept_of_the_one_does_not_involve_the_concept_of_the_other(a, b)
        <->
        (
            all ca all cb (
                (
                    is_concept_of(ca, a)
                    & is_concept_of(cb, b)
                )
                ->
                (
                    -involves(ca, cb)
                    & -involves(cb, ca)
                )
            )
        )
    ).

    all a all b (
        causes(a, b) -> is_understood_through(b, a)
    ).

end_of_list.

% vim:ft=prover9
