formulas(assumptions).

    % Trivially, anything that's an idea of something is an idea.
    all i all o ( is_idea_of(i,o) -> is_idea(i) ).
    all i all o ( is_cognition_of(i,o) <-> is_idea_of(i,o) ).

    % Ideas = concepts
    all i all x ( is_idea_of(i,x) <-> is_concept_of(i,x) ).


    % Whatever we end up talking about is a "thing".
    all x is_thing(x).

    % There is an idea of each thing. (Needed for 2p7)
    all t ( exists i ( is_idea_of(i, t) ) ).

    % Definition of essential involvement
    all x all F (
        involves_essentially(x,F)
        <-> all e ( is_essence_of(e,x) -> involves(e,F) )
    ).

    % We need either this or 'everything has a cause'
    % Everything is conceived through something.
    all x (exists y conceived_through(x,y)).

    % Everything has a cause.
    all x (exists y causes(y,x)).

    % Relationship between conceivability and necessity.
    all x all F ( -conceivably_has(x,F) <-> necessarily_lacks(x,F) ).

    % Reformulations of above.
    all x all F ( necessarily_lacks(x,F) <-> -possibly_has(x,F) ).
    all x all F ( conceivably_lacks(x,F) <-> -necessarily_has(x,F) ).

    % What can be conceived as not existing doesn't essentially involve
    % existence.
    all x all F (
        conceivably_lacks(x,existence) ->
        -involves_essentially(x,existence)
    ).

    % Seemingly at least one of these is needed for 1p1
    all x all y ( is_conceived_through(y, x) -> is_prior_in_nature_to(x, y) ).
    all x all y ( is_in(y, x) -> is_prior_in_nature_to(x, y) ).

    all x all y ( is_affection_of(a,s) -> ( is_affection(a) & has(s, a) ) ).
    all x all y ( is_attribute_of(a,s) -> ( is_attribute(a) & has(s, a) ) ).

    all x all y ( is_mode_of(x,y) <-> is_affection_of(x,y) ).

    all x ( is_mode(x) <-> is_affection(x) ).

    all x all y ( is_mode_of(x,y) <-> ( is_mode(x) & has(y, x) ) ).

    all x all y (
        is_conceived_through(a, b)
        ->
        (
            exists ca exists cb (
                is_concept_of(ca, a) &
                is_concept_of(cb, b) &
                involves(cb, ca)
            )
        )
    ).

    all a all b (
        neither_is_understood_through_the_other(a, b)
        <->
        (
            -is_understood_through(a, b)
            & -is_understood_through(b, a)
        )
    ).

    all a all b (
        neither_causes_the_other(a, b)
        <->
        (
            -causes(a, b)
            & -causes(b, a)
        )
    ).

    all a all b (
        the_concept_of_the_one_does_not_involve_the_concept_of_the_other(a, b)
        <->
        (
            all ca all cb (
                (
                    is_concept_of(ca, a)
                    & is_concept_of(cb, b)
                )
                ->
                (
                    -involves(ca, cb)
                    & -involves(cb, ca)
                )
            )
        )
    ).

    all a all b (
        causes(a, b) -> is_understood_through(b, a)
    ).

    all a all b (
        is_understood_through(a, b) <-> is_conceived_through(a, b)
    ).

    all a all b (
        -(a=b) -> exists c ( are_distinguished_by(a, b, c) & ( has(a, c) | has(b, c) ) )
    ).

    % This is to bring everything under the scope of 1a1
    all x ( is(x) ).

    % Controversial but I think it's needed for 1p4. Talk of attributes is just
    % a way of talking about how a substance is conceived and it can be
    % regimented out.
    all a ( is_attribute(a) <-> is_substance(a) ).

    all producer all product (
        produces(producer, product)
        ->
        causes(producer, product)
    ).

    all a (
        is_only_in_itself(a)
        <->
        (
            all b ( is_in(a,b) -> (b=a) )
        )
    ).

    all a (
        is_only_in_another(a)
        % better: is only in exactly one, distinct, thing
        <->
        (
            exists b ( -(b=a) & is_in(a,b) )
        )
    ).

    all a all b (
        causes(a, b) <-> is_in(b, a)
    ).

    %all a all b ( -produces(a, b) ). % just for debugging 1p6

    % If we write 2p7 in a way that involves the idea of a "connection", then we might need these.
    % Each dependency relation is a "connection" in a graph.
    %all x all y ( depends_on(x,y) <-> is_connected_to(x,y) ).
    %all x all y ( depends_on(x,y) <-> is_connected_to(y,x) ). % perhaps?
    %all x all y ( involves(x,y) <-> is_connected_to(x,y) ).
    %all x all y ( involves(x,y) <-> is_connected_to(y,x) ). % perhaps?
    %all x all y ( causes(x,y) <-> is_connected_to(x,y) ).
    %all x all y ( causes(x,y) <-> depends_on(y,x) ). % perhaps?
    %all x all y ( is_connected_to(x,y) -> causes(x,y) ). % might make 2p7 work
    %all x all y ( is_connected_to(x,y) -> ( causes(x,y) | depends_on(x,y) | involves(x,y) ) ). % needed for 2p7?

end_of_list.

% Noticed: Spinoza assumes that two distinct things cannot be individuated
% by something that neither of them has, e.g., the attribute or affection
% of a third substance.

% Noticed: Spinoza assumes that things can't exist in themselves *and*
% something else.

% vim:ft=prover9
