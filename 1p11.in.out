============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 26041 was started by rafpaf on web107.webfaction.com,
Mon Nov 28 02:20:28 2011
The command was "prover9 -f 1p11.in".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file 1p11.in


formulas(assumptions).
(all x all F (-conceivably_has(x,F) <-> necessarily_lacks(x,F))).
(all x all F (necessarily_lacks(x,F) <-> -possibly_has(x,F))).
(all x all F (conceivably_lacks(x,F) <-> -necessarily_has(x,F))).
(all x all F (involves_essentially(x,F) <-> (all e (is_essence_of(e,x) -> involves(e,F))))).
(all x all F (existence(F) -> (conceivably_lacks(x,F) -> -involves_essentially(x,F)))).
(all x all F (God(x) & existence(F) -> involves_essentially(x,F))).
end_of_list.

formulas(goals).
(all x all F (God(x) & existence(F) -> necessarily_has(x,F))).
end_of_list.

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x all F (-conceivably_has(x,F) <-> necessarily_lacks(x,F))) # label(non_clause).  [assumption].
2 (all x all F (necessarily_lacks(x,F) <-> -possibly_has(x,F))) # label(non_clause).  [assumption].
3 (all x all F (conceivably_lacks(x,F) <-> -necessarily_has(x,F))) # label(non_clause).  [assumption].
4 (all x all F (involves_essentially(x,F) <-> (all e (is_essence_of(e,x) -> involves(e,F))))) # label(non_clause).  [assumption].
5 (all x all F (existence(F) -> (conceivably_lacks(x,F) -> -involves_essentially(x,F)))) # label(non_clause).  [assumption].
6 (all x all F (God(x) & existence(F) -> involves_essentially(x,F))) # label(non_clause).  [assumption].
7 (all x all F (God(x) & existence(F) -> necessarily_has(x,F))) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

% Clauses before input processing:

formulas(usable).
end_of_list.

formulas(sos).
conceivably_has(x,y) | necessarily_lacks(x,y).  [clausify(1)].
-conceivably_has(x,y) | -necessarily_lacks(x,y).  [clausify(1)].
-necessarily_lacks(x,y) | -possibly_has(x,y).  [clausify(2)].
necessarily_lacks(x,y) | possibly_has(x,y).  [clausify(2)].
-conceivably_lacks(x,y) | -necessarily_has(x,y).  [clausify(3)].
conceivably_lacks(x,y) | necessarily_has(x,y).  [clausify(3)].
-involves_essentially(x,y) | -is_essence_of(z,x) | involves(z,y).  [clausify(4)].
involves_essentially(x,y) | is_essence_of(f1(x,y),x).  [clausify(4)].
involves_essentially(x,y) | -involves(f1(x,y),y).  [clausify(4)].
-existence(x) | -conceivably_lacks(y,x) | -involves_essentially(y,x).  [clausify(5)].
-God(x) | -existence(y) | involves_essentially(x,y).  [clausify(6)].
God(c1).  [deny(7)].
existence(c2).  [deny(7)].
-necessarily_has(c1,c2).  [deny(7)].
end_of_list.

formulas(demodulators).
end_of_list.

============================== PREDICATE ELIMINATION =================

Eliminating conceivably_has/2
8 -conceivably_has(x,y) | -necessarily_lacks(x,y).  [clausify(1)].
9 conceivably_has(x,y) | necessarily_lacks(x,y).  [clausify(1)].

Eliminating necessarily_lacks/2
10 necessarily_lacks(x,y) | possibly_has(x,y).  [clausify(2)].
11 -necessarily_lacks(x,y) | -possibly_has(x,y).  [clausify(2)].

Eliminating conceivably_lacks/2
12 conceivably_lacks(x,y) | necessarily_has(x,y).  [clausify(3)].
13 -conceivably_lacks(x,y) | -necessarily_has(x,y).  [clausify(3)].
14 -existence(x) | -conceivably_lacks(y,x) | -involves_essentially(y,x).  [clausify(5)].
Derived: -existence(x) | -involves_essentially(y,x) | necessarily_has(y,x).  [resolve(14,b,12,a)].

Eliminating involves_essentially/2
15 involves_essentially(x,y) | is_essence_of(f1(x,y),x).  [clausify(4)].
16 -involves_essentially(x,y) | -is_essence_of(z,x) | involves(z,y).  [clausify(4)].
Derived: is_essence_of(f1(x,y),x) | -is_essence_of(z,x) | involves(z,y).  [resolve(15,a,16,a)].
17 involves_essentially(x,y) | -involves(f1(x,y),y).  [clausify(4)].
Derived: -involves(f1(x,y),y) | -is_essence_of(z,x) | involves(z,y).  [resolve(17,a,16,a)].
18 -God(x) | -existence(y) | involves_essentially(x,y).  [clausify(6)].
Derived: -God(x) | -existence(y) | -is_essence_of(z,x) | involves(z,y).  [resolve(18,c,16,a)].
19 -existence(x) | -involves_essentially(y,x) | necessarily_has(y,x).  [resolve(14,b,12,a)].
Derived: -existence(x) | necessarily_has(y,x) | is_essence_of(f1(y,x),y).  [resolve(19,b,15,a)].
Derived: -existence(x) | necessarily_has(y,x) | -involves(f1(y,x),x).  [resolve(19,b,17,a)].
Derived: -existence(x) | necessarily_has(y,x) | -God(y) | -existence(x).  [resolve(19,b,18,c)].

Eliminating God/1
20 -God(x) | -existence(y) | -is_essence_of(z,x) | involves(z,y).  [resolve(18,c,16,a)].
21 God(c1).  [deny(7)].
Derived: -existence(x) | -is_essence_of(y,c1) | involves(y,x).  [resolve(20,a,21,a)].
22 -existence(x) | necessarily_has(y,x) | -God(y) | -existence(x).  [resolve(19,b,18,c)].
Derived: -existence(x) | necessarily_has(c1,x) | -existence(x).  [resolve(22,c,21,a)].

Eliminating necessarily_has/2
23 -existence(x) | necessarily_has(y,x) | is_essence_of(f1(y,x),y).  [resolve(19,b,15,a)].
24 -necessarily_has(c1,c2).  [deny(7)].
Derived: -existence(c2) | is_essence_of(f1(c1,c2),c1).  [resolve(23,b,24,a)].
25 -existence(x) | necessarily_has(y,x) | -involves(f1(y,x),x).  [resolve(19,b,17,a)].
Derived: -existence(c2) | -involves(f1(c1,c2),c2).  [resolve(25,b,24,a)].
26 -existence(x) | necessarily_has(c1,x) | -existence(x).  [resolve(22,c,21,a)].
Derived: -existence(c2) | -existence(c2).  [resolve(26,b,24,a)].

============================== end predicate elimination =============

Auto_denials:  (non-Horn, no changes).

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ existence, is_essence_of, involves ]).
Function symbol precedence:  function_order([ c1, c2, f1 ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

kept:      27 existence(c2).  [deny(7)].
kept:      28 is_essence_of(f1(x,y),x) | -is_essence_of(z,x) | involves(z,y).  [resolve(15,a,16,a)].
kept:      29 -involves(f1(x,y),y) | -is_essence_of(z,x) | involves(z,y).  [resolve(17,a,16,a)].
kept:      30 -existence(x) | -is_essence_of(y,c1) | involves(y,x).  [resolve(20,a,21,a)].
           31 -existence(c2) | is_essence_of(f1(c1,c2),c1).  [resolve(23,b,24,a)].
kept:      32 is_essence_of(f1(c1,c2),c1).  [copy(31),unit_del(a,27)].
           33 -existence(c2) | -involves(f1(c1,c2),c2).  [resolve(25,b,24,a)].
kept:      34 -involves(f1(c1,c2),c2).  [copy(33),unit_del(a,27)].
           35 -existence(c2) | -existence(c2).  [resolve(26,b,24,a)].

============================== PROOF =================================

% Proof 1 at 0.01 (+ 0.00) seconds.
% Length of proof is 15.
% Level of proof is 6.
% Maximum clause weight is 2.000.
% Given clauses 0.

3 (all x all F (conceivably_lacks(x,F) <-> -necessarily_has(x,F))) # label(non_clause).  [assumption].
5 (all x all F (existence(F) -> (conceivably_lacks(x,F) -> -involves_essentially(x,F)))) # label(non_clause).  [assumption].
6 (all x all F (God(x) & existence(F) -> involves_essentially(x,F))) # label(non_clause).  [assumption].
7 (all x all F (God(x) & existence(F) -> necessarily_has(x,F))) # label(non_clause) # label(goal).  [goal].
12 conceivably_lacks(x,y) | necessarily_has(x,y).  [clausify(3)].
14 -existence(x) | -conceivably_lacks(y,x) | -involves_essentially(y,x).  [clausify(5)].
18 -God(x) | -existence(y) | involves_essentially(x,y).  [clausify(6)].
19 -existence(x) | -involves_essentially(y,x) | necessarily_has(y,x).  [resolve(14,b,12,a)].
21 God(c1).  [deny(7)].
22 -existence(x) | necessarily_has(y,x) | -God(y) | -existence(x).  [resolve(19,b,18,c)].
24 -necessarily_has(c1,c2).  [deny(7)].
26 -existence(x) | necessarily_has(c1,x) | -existence(x).  [resolve(22,c,21,a)].
27 existence(c2).  [deny(7)].
35 -existence(c2) | -existence(c2).  [resolve(26,b,24,a)].
36 $F.  [copy(35),merge(b),unit_del(a,27)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=0. Generated=7. Kept=6. proofs=1.
Usable=0. Sos=0. Demods=0. Limbo=6, Disabled=26. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=0. Back_subsumed=0.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=0 (0 lex), Back_demodulated=0. Back_unit_deleted=0.
Demod_attempts=0. Demod_rewrites=0.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=0. Nonunit_bsub_feature_tests=0.
Megabytes=0.03.
User_CPU=0.01, System_CPU=0.00, Wall_clock=0.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 26041 exit (max_proofs) Mon Nov 28 02:20:28 2011
