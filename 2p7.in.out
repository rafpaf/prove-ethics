============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 4468 was started by rafpaf on web107.webfaction.com,
Mon Nov 28 18:34:20 2011
The command was "prover9 -f /home/rafpaf/codes/prove-ethics/2p7.in".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file /home/rafpaf/codes/prove-ethics/2p7.in


formulas(assumptions).
(all e all c (cause(c,e) -> (all ic all ie (is_idea_of(ic,c) & is_idea_of(ie,e) -> depends_on(ie,ic) & involves(ie,ic))))).
(all i all o (is_idea_of(i,o) -> is_idea(i))).
(all x all y (depends_on(x,y) -> (exists c connects(c,y,x)))).
(all x all y (cause(x,y) -> (exists c connects(c,x,y)))).
(all x is_thing(x)).
end_of_list.

formulas(goals).
(all connection ((exists i exists j (is_idea(i) & is_idea(j) & connects(connection,i,j))) -> (exists connection2 exists t exists u (is_thing(t) & is_thing(u) & connects(connection2,t,u))))).
end_of_list.

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all e all c (cause(c,e) -> (all ic all ie (is_idea_of(ic,c) & is_idea_of(ie,e) -> depends_on(ie,ic) & involves(ie,ic))))) # label(non_clause).  [assumption].
2 (all i all o (is_idea_of(i,o) -> is_idea(i))) # label(non_clause).  [assumption].
3 (all x all y (depends_on(x,y) -> (exists c connects(c,y,x)))) # label(non_clause).  [assumption].
4 (all x all y (cause(x,y) -> (exists c connects(c,x,y)))) # label(non_clause).  [assumption].
5 (all x is_thing(x)) # label(non_clause).  [assumption].
6 (all connection ((exists i exists j (is_idea(i) & is_idea(j) & connects(connection,i,j))) -> (exists connection2 exists t exists u (is_thing(t) & is_thing(u) & connects(connection2,t,u))))) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

% Clauses before input processing:

formulas(usable).
end_of_list.

formulas(sos).
-cause(x,y) | -is_idea_of(z,x) | -is_idea_of(u,y) | depends_on(u,z).  [clausify(1)].
-cause(x,y) | -is_idea_of(z,x) | -is_idea_of(u,y) | involves(u,z).  [clausify(1)].
-is_idea_of(x,y) | is_idea(x).  [clausify(2)].
-depends_on(x,y) | connects(f1(x,y),y,x).  [clausify(3)].
-cause(x,y) | connects(f2(x,y),x,y).  [clausify(4)].
is_thing(x).  [clausify(5)].
is_idea(c2).  [deny(6)].
is_idea(c3).  [deny(6)].
connects(c1,c2,c3).  [deny(6)].
-is_thing(x) | -is_thing(y) | -connects(z,x,y).  [deny(6)].
end_of_list.

formulas(demodulators).
end_of_list.

============================== PREDICATE ELIMINATION =================

Eliminating cause/2

Eliminating is_idea_of/2

Eliminating depends_on/2

Eliminating is_idea/1

Eliminating connects/3
7 -is_thing(x) | -is_thing(y) | -connects(z,x,y).  [deny(6)].
8 connects(c1,c2,c3).  [deny(6)].
Derived: -is_thing(c2) | -is_thing(c3).  [resolve(7,c,8,a)].

============================== end predicate elimination =============

Auto_denials:  (no changes).

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ is_thing ]).
Function symbol precedence:  function_order([ c2, c3 ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(neg_binary_resolution).  % (HNE depth_diff=0)
  % clear(ordered_res).  % (HNE depth_diff=0)
  % set(ur_resolution).  % (HNE depth_diff=0)
    % set(ur_resolution) -> set(pos_ur_resolution).
    % set(ur_resolution) -> set(neg_ur_resolution).

Auto_process settings:
  % set(unit_deletion).  % (Horn set with negative nonunits)

kept:      9 is_thing(x).  [clausify(5)].
           10 -is_thing(c2) | -is_thing(c3).  [resolve(7,c,8,a)].

============================== PROOF =================================

% Proof 1 at 0.01 (+ 0.00) seconds.
% Length of proof is 7.
% Level of proof is 3.
% Maximum clause weight is 2.000.
% Given clauses 0.

5 (all x is_thing(x)) # label(non_clause).  [assumption].
6 (all connection ((exists i exists j (is_idea(i) & is_idea(j) & connects(connection,i,j))) -> (exists connection2 exists t exists u (is_thing(t) & is_thing(u) & connects(connection2,t,u))))) # label(non_clause) # label(goal).  [goal].
7 -is_thing(x) | -is_thing(y) | -connects(z,x,y).  [deny(6)].
8 connects(c1,c2,c3).  [deny(6)].
9 is_thing(x).  [clausify(5)].
10 -is_thing(c2) | -is_thing(c3).  [resolve(7,c,8,a)].
11 $F.  [copy(10),unit_del(a,9),unit_del(b,9)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=0. Generated=2. Kept=1. proofs=1.
Usable=0. Sos=0. Demods=0. Limbo=1, Disabled=11. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=0. Back_subsumed=0.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=0 (0 lex), Back_demodulated=0. Back_unit_deleted=0.
Demod_attempts=0. Demod_rewrites=0.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=0. Nonunit_bsub_feature_tests=0.
Megabytes=0.03.
User_CPU=0.01, System_CPU=0.00, Wall_clock=0.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 4468 exit (max_proofs) Mon Nov 28 18:34:20 2011
